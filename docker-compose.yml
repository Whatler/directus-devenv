services:
  directus:
    image: directus/directus:${DIRECTUS_IMAGE_VERSION:-latest}
    container_name: ${DIRECTUS_CONTAINER_NAME:-directus}
    ports:
      - "127.0.0.1:${DIRECTUS_PORT:-8055}:8055"
    volumes:
      - ${SHARED_VOLUME_ROOT_PATH:-.}/extensions:/directus/extensions
      - ${SHARED_VOLUME_ROOT_PATH:-.}/templates:/directus/templates
    env_file:
      - ./env/directus.env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - directus-network
      - redis-network
      - postgres-network

  redis:
    image: redis:${REDIS_IMAGE_VERSION:-alpine}
    container_name: ${REDIS_CONTAINER_NAME:-redis}
    ports:
      - "127.0.0.1:${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./conf/redis.conf:/usr/local/etc/redis/redis.conf
    env_file:
      - ./env/redis.env
    networks:
      - redis-network
    deploy:
      resources:
        limits:
          memory: 1024M
    healthcheck:
      test: ["CMD-SHELL", "[ $$(redis-cli ping) = 'PONG' ]"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s

  postgres:
    image: postgres:${POSTGRES_IMAGE_VERSION:-alpine}
    container_name: ${POSTGRES_CONTAINER_NAME:-postgres}
    ports:
      - "127.0.0.1:${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./env/postgres.env
    networks:
      - postgres-network
    healthcheck:
      test: ["CMD", "pg_isready", "--host=localhost", "--username=${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s

  nginx:
    image: nginx:${NGINX_IMAGE_VERSION:-latest}
    container_name: ${NGINX_CONTAINER_NAME:-nginx}
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - directus
    networks:
      - directus-network

  node:
    image: node:${NODE_IMAGE_VERSION:-latest}
    container_name: ${NODE_CONTAINER_NAME:-node}
    working_dir: /usr/src/app
    volumes:
      - ${SSH_KEY_PAIR_FOLDER_PATH:-~/.ssh}:/root/.ssh:ro
      - ${SHARED_VOLUME_ROOT_PATH:-.}/extensions:/usr/src/app/extensions
      - ${SHARED_VOLUME_ROOT_PATH:-.}/templates:/usr/src/app/templates
    environment:
      - NODE_ENV=development
    command: bash -c "if [ -n \"${NODE_PACKAGES}\" ]; then npm install ${NODE_PACKAGES}; fi && tail -f /dev/null"

networks:
  directus-network:
    driver: bridge
  redis-network:
    driver: bridge
  postgres-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
